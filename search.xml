<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Visionfive2 DockerCompose安装及问题</title>
      <link href="/2023/05/16/visionfive2dockercompose-an-zhuang-ji-wen-ti/"/>
      <url>/2023/05/16/visionfive2dockercompose-an-zhuang-ji-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Visionfive2-DockerCompose安装及问题"><a href="#Visionfive2-DockerCompose安装及问题" class="headerlink" title="Visionfive2 DockerCompose安装及问题"></a>Visionfive2 DockerCompose安装及问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经安装好docker，安装步骤见 <a href="https://doc.rvspace.org/VisionFive2/Application_Notes/VisionFive2_AN_Docker/">Visionfive2安装docker</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>主机版本如下</p><p><img src="/2023/05/16/visionfive2dockercompose-an-zhuang-ji-wen-ti/image-20230516182735702.png" alt="image-20230516182735702"></p><p>安装命令</p><pre class=" language-shell"><code class="language-shell">apt install python3 python3-dev python3-pippip3 install docker-compose</code></pre><h2 id="问题还原"><a href="#问题还原" class="headerlink" title="问题还原"></a>问题还原</h2><h3 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h3><p>安装 bcrypt 包时报错：</p><p><img src="/2023/05/16/visionfive2dockercompose-an-zhuang-ji-wen-ti/image-20230516183107854.png" alt="image-20230516183107854"></p><p><strong>解决方法：</strong></p><p><code>setuptools</code>的版本问题，需要更新<code>pip3</code>和<code>setuptools</code>，命令如下：</p><pre class=" language-shell"><code class="language-shell">python3 -m pip install --upgrade pip setuptools wheel</code></pre><h3 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h3><p>构建二进制包的时候出现问题：</p><p><img src="/2023/05/16/visionfive2dockercompose-an-zhuang-ji-wen-ti/image-20230516183414546.png" alt="image-20230516183414546"></p><p><strong>解决方法：</strong></p><p>缺少了<code>cargo</code>包。<code>Cargo</code>是专门为Rust语言开发的工具，用于构建、测试、依赖管理和发布Rust项目。它提供了一套简单而强大的命令行接口，使得管理Rust项目的依赖关系、构建可执行文件和库、运行测试等变得更加方便和高效。</p><pre class=" language-shell"><code class="language-shell">apt install cargo</code></pre>]]></content>
      
      
      <categories>
          
          <category> VisionFive2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisionFive2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSight阅读</title>
      <link href="/2023/05/09/gsight/"/>
      <url>/2023/05/09/gsight/</url>
      
        <content type="html"><![CDATA[<h1 id="GSight阅读"><a href="#GSight阅读" class="headerlink" title="GSight阅读"></a>GSight阅读</h1><p><code>Understanding, Predicting and Scheduling Serverless Workloads under Partial Interference</code></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>函数分类总结：</p><ol><li><strong>schedulerd backend(BG):</strong> 间歇性的触发和调度，没有时间上的要求。</li><li><strong>short-term computing(SC):</strong> 分钟级别的处理时间，毫秒级别的变化没有影响。</li><li><strong>latency sensitive(LS):</strong> 频繁调用的函数，对延迟十分敏感。</li></ol><h2 id="Understanding-Partial-Interference"><a href="#Understanding-Partial-Interference" class="headerlink" title="Understanding Partial Interference"></a>Understanding Partial Interference</h2><p>部分干扰<code>(partial interference)</code>特性：</p><ol><li><p><strong>高波动性：</strong> 函数的执行行为和资源消耗方面的多样性。</p><ul><li><strong>测试分类：CPU密集型、IO密集型、网络密集型</strong></li></ul></li><li><p><strong>空间变化：</strong> 函数的小体积和无状态，导致了部分干扰的空间变化。</p><ul><li>函数的小体积导致了部署的高密度，无状态导致了空间的多样性。</li><li>即使是相同的工作负载的争用，端到端延迟也会有很大差别。</li></ul></li><li><p><strong>时间变化：</strong> 函数的存活时间很短，所以干扰的变化也是时间变化的。</p><ul><li>函数在不同阶段的重叠可能造成不一样的延迟情况，比如这张图中的：LR与KMeans竞争资源，随着时间偏移，LR的时间先增后减，这也就说明在中间的执行阶段两个任务抢占同样的资源较为激烈。</li></ul><p><img src="/2023/05/09/gsight/image-20230509190437914.png" alt="image-20230509190437914"></p></li></ol><blockquote><p>空间和时间两种变化应该是指不同函数之间类型和阶段的干扰</p></blockquote><p><img src="/2023/05/09/gsight/image-20230509203811774.png" alt="image-20230509203811774"></p><ol start="4"><li><strong>热点传播：</strong> 部分干扰触发了链式影响，但是对后续函数的影响与本地函数相反。<ul><li>对于后续的调用函数，因为前面的函数的延迟增加导致了QPS降低，所以他们的本地延迟也降低了。</li><li>对于Openfaas和Openwhisk这样的框架，他们都有一个前端的gateway接受请求，然后转发给后端执行。所以gateway就是阻塞后续函数的部分。</li></ul></li><li><strong>恢复传播：</strong> 恢复也会传播。<ul><li>橙色的虚线部分主要是将竞争的函数放在了其他节点上然后再进行了测试，可以发现，不论是原来受影响的函数还是后续的函数都逐渐恢复了正常。</li></ul></li><li><strong>预测性：</strong> 通过<strong>函数级别</strong>的刻画来获得准确的<strong>部分干扰</strong>。</li></ol><p>serverless函数的性能预测受到部分干扰的影响，为了设计准确的性能预测，首先是需要利用空间和时间两个维度的变化进行预测。其次，他应该是一种整体方法，需要捕捉由于干扰引起的端到端性能变化。最后，应该广泛利用函数级别的刻画。</p><h2 id="Predicting-with-Gsight"><a href="#Predicting-with-Gsight" class="headerlink" title="Predicting with Gsight"></a>Predicting with Gsight</h2><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>在部分干扰下的QoS的精确预测可以通过“时空干扰感知”的增量学习模型来完成，该模型通过对函数的刻画结果作为输入来快速收敛。</p><h3 id="刻画"><a href="#刻画" class="headerlink" title="刻画"></a>刻画</h3><p>这一部分主要描述了干扰刻画的方式</p><p>现有的方式主要有两种（刻画的高开销）：</p><ul><li>成对放置运行：直接将两个函数放在一起执行然后测试其QoS降低程度。</li><li>微benchmark测试：将单独设计的函数benchmark和函数放在一起执行，通过benchmark的结果得到QoS。</li></ul><p>这篇文章通过<code>solo-run</code>的方式收集运行时参数，然后将运行时参数传入预测模型计算干扰。机器学习的输入包括了收集到的<em>系统级</em>和<em>微架构级</em>的参数以及工作负载的特征（包括IL工作的IPC和尾延迟，SC工作的JCT）。</p><h3 id="增量学习"><a href="#增量学习" class="headerlink" title="增量学习"></a>增量学习</h3><p>由于模型在开始时缺少数据集，并且workload在不断的变化。所以采用在线增量的方式最合适。</p><p>首先准备一个小的工作负载的数据集已经相关的QoS，用于生成一个最初的训练模型，在执行期间在使用新的指标和实际运行的QoS对数据集进行扩展。如下的公式展示了基本情况：</p><p><img src="/2023/05/09/gsight/RM%E6%80%BB%E4%BD%93.png" alt="image-20230509203811774"></p><p>$RM$是模型的缩写，$R$是对下表对应的作业的资源配置，$U$是系统层和微架构层收集的各种资源的实际利用率和性能监控计数器，$D$代表启动延迟，$T$代表<code>solo-run</code>期间的生命时间长度。</p><blockquote><p>空间和时间的设计也体现在这里的$D$和$R&amp;U$上</p></blockquote><p>预测模型的空间时间设计不赘述。</p><h3 id="学习模型"><a href="#学习模型" class="headerlink" title="学习模型"></a>学习模型</h3><p>Incremental RFR (IRFR)</p><h2 id="Scheduling-using-Gsight"><a href="#Scheduling-using-Gsight" class="headerlink" title="Scheduling using Gsight"></a>Scheduling using Gsight</h2><p>调度目的：将函数实例部署在最小数量的活动服务器上，在保证函数的QoS上最大限度的提高资源利用率。</p>]]></content>
      
      
      <categories>
          
          <category> Serverless, Partial Interference </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Visionfive2 科学上网</title>
      <link href="/2023/05/03/visionfive2-ke-xue-shang-wang/"/>
      <url>/2023/05/03/visionfive2-ke-xue-shang-wang/</url>
      
        <content type="html"><![CDATA[<h1 id="VisionFive2-科学上网"><a href="#VisionFive2-科学上网" class="headerlink" title="VisionFive2 科学上网"></a>VisionFive2 科学上网</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于我使用的是实验室公用的服务器，安装clash过于频繁了，所以单独用一篇写一下。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-版本选择"><a href="#1-版本选择" class="headerlink" title="1.版本选择"></a>1.版本选择</h3><p>由于比较新的版本没有riscv64版本的，所以暂时选择了 v1.13.0 版本：</p><pre class=" language-shell"><code class="language-shell">wget https://github.com/Dreamacro/clash/releases/download/v1.13.0/clash-linux-riscv64-v1.13.0.gz</code></pre><h3 id="2-下载完成后直接解压缩到-usr-local-bin目录下"><a href="#2-下载完成后直接解压缩到-usr-local-bin目录下" class="headerlink" title="2.下载完成后直接解压缩到/usr/local/bin目录下"></a>2.下载完成后直接解压缩到<code>/usr/local/bin</code>目录下</h3><pre class=" language-shell"><code class="language-shell">gzip -dc clash-linux-riscv64-v1.13.0.gz > /usr/local/bin/clashchmod +x /usr/local/bin/clash# 能省一点就省一点rm -f clash-linux-riscv64-v1.13.0.gz</code></pre><h3 id="3-下载-MMDB-文件"><a href="#3-下载-MMDB-文件" class="headerlink" title="3.下载 MMDB 文件"></a>3.下载 MMDB 文件</h3><p>这里要说明一下，由于我的clash是要和别的同学分开的，所以就不开启service了。</p><pre class=" language-shell"><code class="language-shell"># 在你想在的文件夹下mkdir clashcd clashwget -O Country.mmdb https://github.com/Dreamacro/maxmind-geoip/releases/download/20220812/Country.mmdb</code></pre><h3 id="4-环境变量"><a href="#4-环境变量" class="headerlink" title="4.环境变量"></a>4.环境变量</h3><p>创建一个proxy文件。</p><pre class=" language-shell"><code class="language-shell">export http_proxy="127.0.0.1:7890"export https_proxy="127.0.0.1:7890"export no_proxy="localhost, 127.0.0.1"</code></pre><p>使用的时候source一下。</p><h3 id="5-导入订阅链接"><a href="#5-导入订阅链接" class="headerlink" title="5.导入订阅链接"></a>5.导入订阅链接</h3><pre class=" language-shell"><code class="language-shell">wget -O ~/clash/config.yaml [你的订阅链接]# 或者从其他地方复制过来也是可以的捏</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>最后就是启动了，注意我这里是在我的config的文件夹下。</p><pre class=" language-shell"><code class="language-shell">source ~/clash/proxyclash -d .</code></pre><p><img src="/2023/05/03/visionfive2-ke-xue-shang-wang/%E6%88%90%E5%8A%9F%E5%90%AF%E5%8A%A8.png" alt="成功启动"></p>]]></content>
      
      
      <categories>
          
          <category> VisionFive2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisionFive2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visionfive2 GO环境</title>
      <link href="/2023/05/03/visionfive2go-huan-jing/"/>
      <url>/2023/05/03/visionfive2go-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Visionfive2-GO环境"><a href="#Visionfive2-GO环境" class="headerlink" title="Visionfive2 GO环境"></a>Visionfive2 GO环境</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇博客会主要介绍怎么从源码中构建最新版本的GoLang。</p><h2 id="引导主机上"><a href="#引导主机上" class="headerlink" title="引导主机上"></a>引导主机上</h2><p>1.在引导主机上</p><pre class=" language-shell"><code class="language-shell">git clone https://github.com/golang/go</code></pre><p>2.进入src文件中，交叉编译</p><pre class=" language-shell"><code class="language-shell">cd go/srcGOOS=linux GOARCH=riscv64 ./bootstrap.bash</code></pre><p>3.将编译完的包打包到开发板上</p><pre class=" language-shell"><code class="language-shell">scp -P 22222 ../../go-linux-riscv64-bootstrap.tbz root@localhost:</code></pre><h2 id="开发板上"><a href="#开发板上" class="headerlink" title="开发板上"></a>开发板上</h2><p>1.获得源码</p><pre class=" language-shell"><code class="language-shell"># 二选一即可tar vxf go-linux-riscv64-bootstrap.tbz      git clone https://github.com/golang/go</code></pre><p>2.切换到最新版本</p><p>也可以切换到需要的版本</p><pre class=" language-shell"><code class="language-shell">git checkout $(git --git-dir ./go/.git describe --tags)</code></pre><p>3.编译源码</p><pre class=" language-shell"><code class="language-shell">cd go/srcexport GOROOT_BOOTSTRAP=$HOME/go-linux-riscv64-bootstrap./make.bash</code></pre><p>4.最后可以打包成压缩文件（可选）</p><pre class=" language-shell"><code class="language-shell">cd ..tar -cvf $(git --git-dir ./go/.git describe --tags).$(uname -s |tr [:upper:] [:lower:])-$(uname -m).tar --exclude=pkg/obj --exclude=.git go</code></pre><h2 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h2><h3 id="更改GOPATH和GOROOT"><a href="#更改GOPATH和GOROOT" class="headerlink" title="更改GOPATH和GOROOT"></a>更改GOPATH和GOROOT</h3><pre class=" language-shell"><code class="language-shell">vim /etc/profile# 自己设置路径export GOROOT=/usr/local/goexport GOPATH=/root/golang/work   export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</code></pre><p>最后要记得启动更新</p><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre>]]></content>
      
      
      <categories>
          
          <category> VisionFive2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisionFive2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visionfive2 开发板启动</title>
      <link href="/2023/05/03/visionfive2-kai-fa-ban-qi-dong/"/>
      <url>/2023/05/03/visionfive2-kai-fa-ban-qi-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="VisionFive2-开发板启动"><a href="#VisionFive2-开发板启动" class="headerlink" title="VisionFive2 开发板启动"></a>VisionFive2 开发板启动</h1><h2 id="内核更新"><a href="#内核更新" class="headerlink" title="内核更新"></a>内核更新</h2><h3 id="1-挂载sd卡："><a href="#1-挂载sd卡：" class="headerlink" title="1.挂载sd卡："></a>1.挂载sd卡：</h3><p>​1.在工作的ubuntu系统下列出设备:</p><pre class=" language-shell"><code class="language-shell">fdisk -l</code></pre><p><img src="/2023/05/03/visionfive2-kai-fa-ban-qi-dong/%E8%AE%BE%E5%A4%87%E6%83%85%E5%86%B51.png" alt="设备情况1"></p><p>​2.将文件系统进行挂载，需要挂载两部分，如下：</p><pre class=" language-shell"><code class="language-shell">mount /dev/sdb2 /media/mao/root/boot/mount /dev/sdb3 /media/mao/root/usr/</code></pre><p>​3.将制作好的内核文件和启动文件分别拷贝至对应文件夹下：</p><pre class=" language-shell"><code class="language-shell"># 对于启动文件cp /home/mao/tmp/vmlinuz-5.15.0-starfive /media/mao/root/boot/boot/ && synccp /home/mao/tmp/config-5.15.0-starfive /media/mao/root/boot/boot/ && synccp /home/mao/tmp/System.map-5.15.0-starfive /media/mao/root/boot/boot/ && sync# 对于内核镜像cp /home/mao/tmp/linux-image-5.15.0-starfive_5.15.0-starfive-1_riscv64.deb /media/mao/root/usr/ && synccp /home/mao/tmp/linux-libc-dev_5.15.0-starfive-1_riscv64.deb /media/mao/root/usr/ && synccp /home/mao/tmp/linux-headers-5.15.0-starfive_5.15.0-starfive-1_riscv64.deb /media/mao/root/usr/ && sync</code></pre><h3 id="2-使用sd卡启动开发板："><a href="#2-使用sd卡启动开发板：" class="headerlink" title="2.使用sd卡启动开发板："></a>2.使用sd卡启动开发板：</h3><p>在完成上述操作后启动开发板会进入紧急模式，输入root下的密码即可登录</p><p>​1.登录后在 <code>/</code> 目录下能够看到拷贝完成的三个内核文件，然后执行以下命令，<strong>注意要按照顺序执行</strong>：</p><pre class=" language-shell"><code class="language-shell">dpkg -i linux-headers-5.15.0-starfive_5.15.0-starfive-1_riscv64.debdpkg -i linux-libc-dev_5.15.0-starfive-1_riscv64.debdpkg -i linux-image-5.15.0-starfive_5.15.0-starfive-1_riscv64.deb</code></pre><p>​2.重启系统后应该是能够进入正常的登录界面就可以了。</p><h2 id="磁盘无损扩展"><a href="#磁盘无损扩展" class="headerlink" title="磁盘无损扩展"></a>磁盘无损扩展</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这一步是因为我的SD卡是32G的，但是下载的镜像中只有16G，并且我认为扩展现有的分区在使用的时候体验更好。</p><h3 id="使用growpart进行扩展"><a href="#使用growpart进行扩展" class="headerlink" title="使用growpart进行扩展"></a>使用<code>growpart</code>进行扩展</h3><p>1.安装<code>growpart</code></p><pre class=" language-shell"><code class="language-shell">apt install cloud-utils</code></pre><p>2.查看磁盘分区</p><pre class=" language-shell"><code class="language-shell">fdisk -l</code></pre><p><img src="/2023/05/03/visionfive2-kai-fa-ban-qi-dong/%E8%AE%BE%E5%A4%87%E6%83%85%E5%86%B52.png" alt="设备情况2"></p><p>可以看到有这样三个分区，我要扩展的就是第三个分区</p><p>3.扩展分区</p><pre class=" language-shell"><code class="language-shell"># 扩容mmcblk1p3growpart /dev/mmcblk1 3# output# CHANGED: partition=3 start=239616 old: size=32526303 end=32765918 new: size=60827615 end=61067230# 加载文件系统并检查 4K 对齐resize2fs /dev/mmcblk1p3</code></pre><p>4.重启系统</p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      <categories>
          
          <category> VisionFive2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisionFive2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
